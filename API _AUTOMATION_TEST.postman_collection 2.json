{
	"info": {
		"_postman_id": "c7ba6d30-bc49-410c-a420-972684534d90",
		"name": "API AUTOMATION TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get all to do entries",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a00399f0-3a22-49dd-b382-c06ed6a00749",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 300000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300000);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.fusio-project.org/index.php/todo",
					"protocol": "https",
					"host": [
						"demo",
						"fusio-project",
						"org"
					],
					"path": [
						"index.php",
						"todo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get A Single To Do Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "569a7e95-bd1f-4c99-a7b6-14eba08d012a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"pm.test(\"Response time is less than 300000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.fusio-project.org/index.php/todo/?todo_id=2",
					"protocol": "https",
					"host": [
						"demo",
						"fusio-project",
						"org"
					],
					"path": [
						"index.php",
						"todo",
						""
					],
					"query": [
						{
							"key": "todo_id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST  Create New Record",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43eb9fe7-31ee-460e-bdd9-c352b10cd473",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 300000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300000);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://regres.in/api/user",
					"protocol": "https",
					"host": [
						"regres",
						"in"
					],
					"path": [
						"api",
						"user"
					]
				},
				"description": "Create New Record"
			},
			"response": []
		},
		{
			"name": "PUT - Update A User Record",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "52b41c01-b946-4bf6-ac33-6bb2f4e55b27",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Forbidden\");",
							"});",
							"pm.test(\"Response time is less than 300000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://regres.in/api/user/2",
					"protocol": "https",
					"host": [
						"regres",
						"in"
					],
					"path": [
						"api",
						"user",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE A User Record",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://regres.in/api/users/2",
					"protocol": "https",
					"host": [
						"regres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "22a27f31-7cab-4e08-8575-a07c331099d6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "abfdf829-9faf-4609-9cac-70416614abed",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}